{"version":3,"file":"static/js/499.f04bb973.chunk.js","mappings":"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","sources":["components/FormContact/FormContacts.styled.js","reduxFile/contacts/selectors.js","components/Filter/Filter.js","components/ListContact/ListContact.js","../node_modules/nanoid/index.browser.js","components/FormContact/FormContact.js","pages/ContactsPage.js"],"sourcesContent":["\nimport styled from 'styled-components'\n\n \nexport const ContainerDivPhonebook = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nflex-direction: column;\n`\nexport const TitlePhonebook = styled.h2`\nfont-family: 'roboto';\nfont-size: 24px;\nmargin-top: 24px;\nmargin-bottom: 24px;\n`\nexport const TitleContacts = styled.h2`\nfont-family: 'roboto';\nfont-size: 24px;\nmargin-bottom: 24px;\nmargin-top: 24px;\n`\nexport const FormPhonebook = styled.form`\nwidth: 300px;\nheight: 250px;\nborder: 2px solid #A3E4D7;\nborder-radius: 10px;\npadding: 20px;\n`\n   export const LabelPhonebook = styled.label`\nfont-family: 'roboto';\n\n   `\nexport const TitleInputSearch = styled.h3`\nfont-family: 'roboto';\nfont-size: 20px;\nmargin-bottom: 12px;\n\n`\nexport const InputPhonebookName = styled.input`\n   display: block;\n   margin-top: 10px;\n   margin-bottom: 50px;\n   border: 2px solid #A3E4D7;\n   border-radius: 10px;\n   height: 20px;\n   width: 300px;\n   &:hover {\n      border: 2px solid #82C9B1;\n  }\n \n   `\nexport const InputPhonebookNumber = styled.input`\n   display: block;\n   margin-top: 10px;\n   margin-bottom: 50px;\n   border: 2px solid #A3E4D7;\n   border-radius: 10px;\n   height: 20px;\n   width: 300px;\n   &:hover {\n      border: 2px solid #82C9B1;\n  }\n   `\n\n\nexport const ButtonPhonebook = styled.button`\ndisplay: block;\nfont-family: 'roboto';\nborder: 2px solid #A3E4D7;\nborder-radius: 10px;\nfont-size: 18px;\nfont-weight: 500;\nbackground-color: #A3E4D7;\nwidth: 150px;\nheight: 28px;\nmargin: auto ;\ntransition: background-color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover {\n    background-color: #82C9B1; \n    border:none;\n   \n  }\n\n`\n\nexport const InputSearch = styled.input`\nheight: 20px;\nborder: 2px solid #A3E4D7;\nborder-radius: 10px;\n&:hover {\n      border: 2px solid #82C9B1;\n  }\n`\nexport const ButtonDelete = styled.button`\n\nfont-family: 'roboto';\nborder: 2px solid #A3E4D7;\nborder-radius: 10px;\nfont-size: 18px;\nfont-weight: 500;\nbackground-color: #A3E4D7;\nwidth: 80px;\nheight: 28px;\nmargin-left: 12px;\ntransition: background-color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover {\n    background-color: #82C9B1; \n    border:none;\n   \n  }\n\n\n`\nexport const  ItemContact = styled.li`\nfont-family: 'roboto';\nmargin-top: 8px;\n`\nexport const  Message = styled.p`\nfont-family: 'roboto';\nmargin-top: 12px;\n`\n\n","import { createSelector } from \"@reduxjs/toolkit\";\n\n\n\nexport const selectContacts = state => state.contacts.items;\n\n\nexport const selectFilter = state => state.filter.value;\n\n  export const selectIsLoading = state => state.contacts.isLoading;\n  export const selectError = state => state.contacts.error;\n\n  export const selectVisibleContacts = createSelector(\n  \n    [ selectContacts, selectFilter],\n   \n     (contacts, filter) => {\n       return contacts.filter(contact => contact.name.toLowerCase()\n        .includes(filter.toLowerCase()))\n     }\n    )\n\n\n    ","import { InputSearch, TitleInputSearch } from 'components/FormContact/FormContacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'reduxFile/contacts/filterSlice';\n\nimport { selectFilter } from 'reduxFile/contacts/selectors';\n\n\n\n\n export const Filter =  () => { \n    const dispatch = useDispatch();\n    const filterValue = useSelector(selectFilter);\n\n   \n\n\n    const handleFilterChange = (e) => {\n        const { value } = e.target;\n        dispatch(filterContacts(value));\n      };\n    \n\n        return (\n            <>\n            <TitleInputSearch> Find contacts by name </TitleInputSearch>\n            <InputSearch \n            type=\"text\" \n            name=\"search\" \n            value={filterValue} \n            onChange={handleFilterChange} \n            required />\n            </>\n        );\n    }\n \n","\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ButtonDelete, ItemContact } from '../FormContact/FormContacts.styled'\nimport { deleteContact } from 'reduxFile/contacts/operations';\nimport { selectVisibleContacts } from 'reduxFile/contacts/selectors';\n\nexport const ListContacts = () => {\nconst dispatch = useDispatch();\n\nconst filteredContacts = useSelector(selectVisibleContacts);\n\nconst handleDelete = (contactId) => {\n\n  dispatch(deleteContact(contactId))};\n  return (\n    <ul>\n      {filteredContacts.map((contact) => (\n        <ItemContact \n        key={contact.id}>\n          {contact.name} : {contact.number}{''} \n          <ButtonDelete type=\"button\" onClick={() => handleDelete(contact.id)}>\n            Delete\n            </ButtonDelete>\n            </ItemContact>\n        \n      ))}\n      \n    </ul>\n  );\n};\n\n\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { nanoid } from 'nanoid';\nimport { FormPhonebook,ButtonPhonebook,LabelPhonebook,InputPhonebookName,InputPhonebookNumber } from './FormContacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectContacts } from 'reduxFile/contacts/selectors';\nimport { addContact } from 'reduxFile/contacts/operations';\n\n\n\nexport const FormContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts)\n  const [form, setForm] = useState({name: '', number: ''} );\nconst {name, number} = form;\n\n  const handleChange = (e) => {\n    const {name , value } = e.target;\n    setForm((prevForm) => ({ ...prevForm, [name]: value }))};\n\n    \n      \n\n const  handleSubmit = (e) => {\n    e.preventDefault();\n   \n    if (contacts.some((contact) => contact.name.toLowerCase() === form.name.toLowerCase())) {\n      alert(`${form.name} already in contacts`);\n      return;\n    }\n    const contact = {\n      name,\n      number,\nid: nanoid()\n    };\n    dispatch(addContact(contact));\n   setForm({name: '', number: ''})\n  };\n\n\n  return (\n        \n    <FormPhonebook onSubmit={handleSubmit}>\n      <LabelPhonebook>\n        Name\n        <InputPhonebookName\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </LabelPhonebook>\n      <LabelPhonebook>\n        Number\n        <InputPhonebookNumber\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n      </LabelPhonebook>\n      <ButtonPhonebook type=\"submit\">Add contact</ButtonPhonebook>\n    </FormPhonebook>\n\n);\n\n}\n\n\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { fetchContacts } from \"reduxFile/contacts/operations\";\nimport { selectContacts } from \"reduxFile/contacts/selectors\";\nimport { ListContacts } from \"components/ListContact/ListContact\";\nimport { FormContacts } from \"components/FormContact/FormContact\";\nimport { ContainerDivPhonebook, Message, TitleContacts, TitlePhonebook } from \"components/FormContact/FormContacts.styled\";\n\n\nconst ContactsPage = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n\n    const contacts = useSelector(selectContacts);\n    return (\n        \n        \n          \n            <ContainerDivPhonebook>\n                <TitlePhonebook>Phonebook</TitlePhonebook>\n                <FormContacts />\n                <TitleContacts>Contacts</TitleContacts>\n                <Filter />\n                {contacts.length > 0 ? <ListContacts /> : <Message> You have not added any contacts</Message>}\n               \n            </ContainerDivPhonebook>\n    \n    )\n};\n\nexport default ContactsPage;\n\n\n"],"names":["ContainerDivPhonebook","styled","_templateObject","_taggedTemplateLiteral","TitlePhonebook","_templateObject2","TitleContacts","_templateObject3","FormPhonebook","_templateObject4","LabelPhonebook","_templateObject5","TitleInputSearch","_templateObject6","InputPhonebookName","_templateObject7","InputPhonebookNumber","_templateObject8","ButtonPhonebook","_templateObject9","InputSearch","_templateObject10","ButtonDelete","_templateObject11","ItemContact","_templateObject12","Message","_templateObject13","selectContacts","state","contacts","items","selectFilter","filter","value","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","Filter","dispatch","useDispatch","filterValue","useSelector","_jsxs","_Fragment","children","_jsx","type","onChange","e","target","filterContacts","required","ListContacts","filteredContacts","map","number","onClick","contactId","id","deleteContact","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","FormContacts","_useState","useState","_useState2","_slicedToArray","form","setForm","handleChange","_e$target","prevForm","_objectSpread","_defineProperty","onSubmit","preventDefault","some","alert","concat","addContact","useEffect","fetchContacts"],"sourceRoot":""}